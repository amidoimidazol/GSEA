/******************************************************************************************
Author: Peter Forgacs <peter.forgacs3@gmail.com>
Date: 2015
Description:	The Thread_Controller class handles the FDR object creation based on the data that was generated by GSEA.
				It handles the control of the random sample generation.
				Creation of FDR objects.
				Creation of threads for the FDR objects.
******************************************************************************************/
#include "Thread_Controller.h"

Thread_Controller::Thread_Controller(GSEA& main_test_, int repetition_number_) : main_test(main_test_), repetition_number(repetition_number_) {
	/*
		The Thread_Controller constructor checks if it can use multithreading on the system.
		If so launches the steps needed to perform the FDR test.
	*/
	// Sets up state depending on the number of threads
	hardware_threads = std::thread::hardware_concurrency();
	hardware_threads > 1 ? state = 0 : state = 1;

	// Sets up additional data members based on the number of threads
	// TODO maybe in a function
	num_threads = hardware_threads - 1;
	mod_rep = repetition_number % num_threads;
	obj_rep_num = (repetition_number - mod_rep) / num_threads;

	// Launch FDR test
	switch (state)
	{
	case 0:
		multi_thread_fdr();
		break;
	case 1:
		single_thread_fdr();
		break;
	}
}

void Thread_Controller::multi_thread_fdr()
{
	/*
		Controls the workflow of the FDR object creation
	*/

	// Create a random samples
	Rsample_v = r_sample_factory();
	
	// Initalize a vector of threads
	vector<thread> threads(num_threads);

	clock_t child = clock();

	// Create a vector of FDR objects with the non default constructor each one getting its own Rsample
	vector<FDR> fdr_objects;
	for (auto random_sample : Rsample_v)
	{
		fdr_objects.push_back(FDR(random_sample));
	}

	// Launch each thread with a separate object
	for (long i = 0; i < num_threads; ++i)
		threads[i] = thread(&FDR::simulation_controller, fdr_objects[i]);

	// Join all threads when dont
	std::for_each(threads.begin(), threads.end(),
		std::mem_fn(&std::thread::join));

	// TODO single repetitions!
	
	printf("Full FDR run: %.2fs\n", (double)(clock() - child) / CLOCKS_PER_SEC);
}

vector<R_sample> Thread_Controller::r_sample_factory()
{
	/*
		Initalizes R_sample objects.
		This produces the value for the Rsample_v data member.
	*/

	vector<R_sample> container;
	for (int i = 0; i < num_threads; ++i)
	{
		container.push_back(R_sample(main_test.sample_size, obj_rep_num, main_test.v_population));
	}
	return container;
}
